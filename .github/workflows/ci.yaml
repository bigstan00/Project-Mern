name: Local CI Pipeline

on:  
  push:  # Trigger on push events to the master branch
    branches:
      - master  # Adjust to your main branch (e.g., main or master)
  pull_request:  # Trigger on pull requests targeting the master branch
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build frontend Docker image
        env:
          IMAGE_NAME: frontend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker build -t $USERNAME/$IMAGE_NAME:$VERSION .

      - name: Build backend Docker image
        env:
          IMAGE_NAME: backend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker build -t $USERNAME/$IMAGE_NAME:$VERSION .

      - name: Run Docker Compose Locally
        run: |
          docker compose down --remove-orphans  # Ensure no conflicting containers
          docker compose up -d  # Start the entire stack

      - name: Verify Containers Are Running
        run: |
          docker ps

      - name: Check Prometheus Targets
        run: |
          curl -f http://localhost:9090/targets || exit 1  # Validate Prometheus is scraping

      - name: Check Alertmanager
        run: |
          curl -f http://localhost:9093 || exit 1

      - name: Check NGINX Configuration
        run: |
          docker exec nginx-cont nginx -t  # Validate NGINX config

      - name: Check Node Exporter
        run: |
          curl -f http://localhost:9100 || exit 1

  push-to-docker:
    runs-on: ubuntu-latest
    needs: build-and-test  # This job depends on successful build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Tag Frontend Image
        env:
          IMAGE_NAME: frontend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker tag $USERNAME/$IMAGE_NAME:$VERSION $USERNAME/$IMAGE_NAME:$VERSION

      - name: Tag Backend Image
        env:
          IMAGE_NAME: backend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker tag $USERNAME/$IMAGE_NAME:$VERSION $USERNAME/$IMAGE_NAME:$VERSION

      - name: Push Docker frontend image to Docker Hub
        env:
          IMAGE_NAME: frontend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker push $USERNAME/$IMAGE_NAME:$VERSION

      - name: Push Docker backend image to Docker Hub
        env:
          IMAGE_NAME: backend
          VERSION: latest
          USERNAME: bigstan00
        run: |
          docker push $USERNAME/$IMAGE_NAME:$VERSION
